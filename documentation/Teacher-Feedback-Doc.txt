##Decomposition and algorithgm notes##:
genral not about algorithm designs, needs anotation (goses for whole class)


You need to break down each problem more thoroughly. For example, explain how the system will manage the booking process to avoid overbooking, how it will reallocate cancelled spaces, and how it will notify users when spaces become available. Consider discussing potential risks and challenges, such as handling high volumes of users or preventing system downtime. 


Appreciation of Wider Issues in Context (Band 2 - 4-6 Marks) 
You have identified important wider issues like security and performance but need to explain in more detail why they matter and how you will manage them. For example, how will the system handle compliance with GDPR, especially considering you are dealing with minors? Additionally, go into more depth on scalability—what will happen if hundreds of users try to book at once? What load testing strategies will you employ? Address legal considerations, particularly with regards to children’s data and system resilience. 
Appreciation of Business Context Band 1 (1-3 Marks)  
You need to explain how the proposed solution addresses the business’s specific goals. For example, how will the admin pages improve event management? How will the booking system help CoderDojo deal with their current issues, such as over-attendance? Show more awareness of how your solution will improve operational efficiency, reduce errors, and enhance user experience. Tie each feature back to a specific business need to demonstrate a better understanding of the context. 

Functional and Non-Functional Requirements Band 2 (4-6 Marks)
Good work in defining both functional and non-functional requirements, with clear reasoning for each page and feature. Your use of KPIs such as load times, system uptime, and user satisfaction is thorough and well aligned with the goals of the business. To improve, include more detail about how you will measure user satisfaction (e.g., through surveys or feedback) and how these KPIs will be tracked over time.  
Expand on the functional and non-functional requirements by providing more detail on how each will be implemented. For example, how will the booking system handle cancellations and waiting lists? What database architecture will be used to store user information securely? Explain why these requirements are essential to the system’s success and how they will be achieved using technologies like Flask, SQLite, and Stripe. 
key Performance Indicators (KPIs) of the Solution Band 1 (1-3 Marks) 
You need to explain how each KPI will be measured and why it is important. For example, how will you track system uptime and what tools will be used to measure it? Explain how the KPIs will help CoderDojo assess the performance of the system and make improvements over time. Link the KPIs back to the client’s goals to show how they will ensure the solution is meeting expectations. 

Justifying How the Recommended Solution Meets the Needs of Clients and Users Band 1 (1-3 Marks) 

Give more detailed justification of how your solution meets the specific needs of the client and users. For example, explain how the admin pages will help organisers manage bookings, reduce over-attendance, and track participant data more efficiently. For users, discuss how the booking system will streamline the registration process and improve their overall experience, particularly for busy parents booking for children. 
Justifying the Potential Risks and How These Will Be Mitigated Band 1 (1-3 Marks) 
You have identified some risks, but you need to provide a more detailed plan for how you will mitigate them. For example, how will you ensure that the system remains secure from attacks? What backup strategies will you use to prevent data loss or system downtime? Discuss how you will address legal compliance risks, particularly when dealing with minors’ data, and explain how regular system testing and monitoring will help mitigate risks. 
Regulatory Guidelines and Legal Requirements Band 1 (1-3 Marks) 
Give a clearer explanation of how the system will ensure compliance with GDPR and other relevant legal requirements. How will user data be collected, stored, and secured? How will the system obtain consent from users, especially when dealing with minors? Discuss how parental controls and age verification will be implemented to ensure the platform is safe and compliant with regulations. 
Overall Feedback to move to a Distinction 

Decomposing the Problem  
Provide a detailed breakdown of how each identified problem will be addressed. Focus on real-time booking and resource management. 
Wider Issues  
Expand on the importance of security, performance, and legal compliance, and provide detailed solutions for managing these challenges. 


Business Context  
Connect the solution’s features to the client’s business goals. Explain how each feature will improve operational efficiency and the user experience. 
Functional/Non-Functional Requirements 
Give more detail on how the requirements will be implemented and why they are critical for the solution’s success. 
KPIs 
Explain how the KPIs will be measured and why they are important for tracking system performance. 
Justification and Risk Mitigation 
Provide a more detailed justification of how the solution meets client needs and include a thorough risk mitigation strategy. 

Regulatory Compliance 
Ensure the solution complies with GDPR and other legal requirements. Provide a clear plan for handling minors’ data and implementing parental controls. 
























##GENERAL TASK 1B NOTES##:
Decomposition of Problem 

Your flowcharts outline general steps for the algorithms but lack critical details for a full-stack approach, specifically with database interaction and error handling. For instance, the User Registration algorithm has input validations (like username and password length checks) but misses clear steps for connecting to a database, querying to check if a username or email already exists, and managing the database connection securely. 

 

Application of Logical Thinking and Conventions 

The algorithms follow a basic logical structure and attempt to cover input validation, especially for username and password creation. However, there is a lack of error handling for database connectivity or response if a query fails affects the robustness of the solution. Additionally, certain logical flows, like the registration and course booking steps, could be improved by adding specific details for database management, input sanitisation, and validation. 

 

Your algorithms outline the core steps for User Registration and Booking but need to be enhanced to meet full-stack requirements.  

 

Include steps for database connectivity, querying for existing usernames or emails, and inserting new records. Database actions (connect, query, insert) are essential for managing user data in a full-stack application. 

Add error handling (e.g., try-except blocks) to manage potential database issues. This will make the system more robust and reliable. 

Use consistent naming and formatting conventions and include comprehensive input validation to ensure the program handles different types of user input and errors gracefully. 

Ensure all critical validation checks, such as matching passwords and validating email formats, are clearly presented. 

 

Example of an improved version. 

FUNCTION register_user 

 

    DISPLAY "Please enter a username for your new account" 

    RECEIVE username input 

 

    IF length of username < 3 

        DISPLAY "Error: Username must be at least 3 characters" 

        RETURN to username input 

 

    DISPLAY "Please enter a password for your new account" 

    RECEIVE password input 

 

    IF length of password < 8 OR password does not contain special character 

        DISPLAY "Error: Password must be at least 8 characters and contain a special character" 

        RETURN to password input 

 

    DISPLAY "Please confirm your password" 

    RECEIVE password_confirm input 

 

    IF password != password_confirm 

        DISPLAY "Error: Passwords do not match" 

        RETURN to password input 

 

    DISPLAY "Please enter your email address" 

    RECEIVE email input 

 

    IF email does not contain "@" OR email already exists in user_database 

        DISPLAY "Error: Invalid email format or email already in use" 

        RETURN to email input 

 

    TRY 

        CONNECT to user_database 

 

        # Check if username is already taken 

        QUERY "SELECT * FROM users WHERE username = ?", username 

        IF username exists in database 

            DISPLAY "Error: Username already exists" 

            RETURN to username input 

 

        # Secure password hashing 

        CREATE salt 

        HASH password with salt 

 

        # Insert new user into database 

        INSERT username, hashed password, and email into user_database 

        COMMIT changes to save the new account 

 

        DISPLAY "Account successfully created. Please log in." 

 

    CATCH database errors 

        DISPLAY "Database error occurred. Please try again." 

 

    FINALLY 

        CLOSE database connection 

 

    RETURN to login page 

















##DATA DESIGNS##:
Foreign key names are not consistently descriptive, e.g., User_id and Staff_id in different tables. 

 

Error Handling -
Limited validation constraints for critical fields 
email lacks format validation. 
No constraints for phone numbers to ensure valid formatting. 
No checks for logical consistency, e.g., ensuring number_of_freeslots doesn’t exceed number_of_slots. 

Data Types-
Inappropriate use of VARCHAR for fields like salary and hourly_pay, which should be numeric types (DECIMAL). 
User_id is listed as VARCHAR in some tables, but it should match the data type of the userId in the Users table (i.e., INT). 

 

Age Validation -
The Age field lacks constraints to ensure it falls within a valid range for the application (e.g., between 5 and 100).

Example or Improved Users Table-

Field Name       | Data Type  | Length/Size | Special Requirements / Constraints                              | Description
-----------------|------------|-------------|----------------------------------------------------------------|------------------------------------------------------------
userId           | INT        | -           | Primary Key, Auto-increment                                   | Unique identifier for each user.
username         | VARCHAR    | 20          | NOT NULL, UNIQUE, No spaces allowed (CHECK username NOT LIKE '% %') | User-defined identifier for login.
email            | VARCHAR    | 100         | NOT NULL, UNIQUE, Must match format (CHECK email LIKE '%@%.%') | Email address for login and communication.

Field Name       | Data Type  | Length/Size | Special Requirements / Constraints                              | Description
-----------------|------------|-------------|----------------------------------------------------------------|------------------------------------------------------------
passwordHash     | VARCHAR    | 255         | NOT NULL, Minimum length of 8 (CHECK LENGTH(passwordHash) >= 8) | Hashed password for secure login.
firstName        | VARCHAR    | 50          | NOT NULL                                                     | User's first name.
lastName         | VARCHAR    | 50          | NOT NULL                                                     | User's last name.
phoneNumber      | VARCHAR    | 15          | Must be digits only (CHECK phoneNumber ~ '^0-9]{10,15}$')     | User's contact number.
studentId        | INT        | -           | Foreign Key (REFERENCES Students(student_id)), Optional       | Links to the Students table if the user is a parent of a student.
createdAt        | TIMESTAMP  | -           | Default: Current timestamp                                    | Automatically records when the user account is created.
updatedAt        | TIMESTAMP  | -           | Default: Updates with each modification                       | Automatically records when the user account is updated.

##TEST STRATEGY##:
need to submit

















